Q1:
Write a Java program to input the radius of a circle and calculate its area using the formula:
Area = π × r²
Display the result as a floating-point number with two decimal places.


Q2)
 Write a Java program to calculate Simple Interest and Total Amount.
 Input values should include:
Principal (double)


Rate of Interest in % (double)


Time in years (double)
 Use the formula:
 Simple Interest = (P × R × T) / 100
 Display the interest and total amount.


Q3:
 Write a Java program to calculate Compound Interest and Total Amount.
 Input values should include:
Principal (double)
Rate of Interest in % (double)
Time in years (double)

 Use the formula:
 Amount = P × (1 + R/100)ᵀ
 Compound Interest = Amount − Principal
 Display the compound interest and total amount 

 Q4:
 Write a Java program to input and display student details.
 The program should ask the user to enter:
Name (String)
Roll Number (int)
Age (int)
Grade (String)

 Then, print all the student details in a clear format.


Q5)
Q:
 Write a Java program to calculate Simple Interest and Compound Interest where the time is entered in months.
Input:
Principal amount (double)
Annual rate of interest in percentage (double)
Time in months (int)
Requirements:
Convert time in months to years.
Calculate:

Simple Interest using the formula:
 SI = (Principal × Rate × Time) / 100

Compound Interest using the formula:
 CI = Principal × (1 + Rate/100)^Time − Principal

Print both interests and their corresponding total amounts.
Output:
Time in years (converted from months)
Simple Interest and Total with Simple Interest
Compound Interest and Total with Compound Interest


Day-6 Assignment Questions
===============================
Q1)Write a Java program that prompts the user for a character, converts it to its ASCII value, and displays the result.

Input format:
The input is the character (alphabet/ digit/ special character).

Output format:
The output is the integer that represents the ASCII value.

Note:
The code for handling inputs is already been given, your task is to fill in the required code.

Sample Test Cases

Test Case 1 Expected Output
A
65


Expected Output
@_
64


Expected Output
8
56


Expected Output
b
98


Expected Output
0
48

Q2)Check if a Number is Even or Odd
Problem:
 Write a Java program that checks whether a number entered by the user is even or odd.

Q3) Checking Whether a Year is a Leap Year
Problem:
 Write a Java program that checks whether a given year is a leap year or not:
A year is a leap year if it is divisible by 4 and not divisible by 100, except when it is divisible by 400.

Q4) Checking Whether a Number is Positive, Negative, or Zero
Problem:
 Write a Java program to check if a given number is positive, negative using a ternary operator.

 Q5)Checking if a Number is Divisible by 5
Problem:
 Write a Java program to check if a number is divisible by 5 using a ternary operator


Day-7 Assignment Questions
============================Problem:
Q1)  Write a Java program that categorizes a person into an age group based on their age using a ternary operator:
"Child" if age is less than 12

"Teenager" if age is between 12 and 19
"Adult" if age is between 20 and 64
"Senior" if age is 65 or older

Q2) 2. Discount Calculation
Problem:
 Write a Java program to apply a discount based on the total shopping amount using a ternary operator:
20% discount if the total amount is greater than or equal to 1000
10% discount if the total amount is between 500 and 999
No discount if the amount is less than 500

Q3)
 Bank Account Status Check
Problem:
 Write a Java program to check the account balance and classify it:
"Good Standing" if the balance is greater than or equal to $1000
"Low Balance" if the balance is between $500 and $999
"Account Overdrawn" if the balance is less than $500

Q4) Hour of the Day Greeting
Problem:
 Write a Java program to print a greeting based on the hour of the day using ternary operators:

"Good Morning" if the hour is between 5 AM and 12 PM
"Good Afternoon" if the hour is between 12 PM and 5 PM
"Good Evening" if the hour is between 5 PM and 10 PM
"Good Night" if the hour is between 10 PM and 5 AM

Q5) Checking Whether a Number is Positive, Negative, or Zero
Problem:
 Write a Java program to check if a given number is positive, negative, or zero using a ternary operator.

Q6)
Temperature Classification
Problem:
 Write a program using a ternary operator to classify the temperature:
If the temperature is above 30°C, print "Hot".
If the temperature is between 15°C and 30°C, print "Moderate".
Otherwise, print "Cold".

Q7)Determine Tax Bracket Based on Income
Problem:
 Write a Java program that computes the income tax based on the user's salary:
If income is less than 300,000, the tax rate is 5%.
If income is between 300,000 and 1,000,000, the tax rate is 10%.
If income is above 1,000,000, the tax rate is 15%.
Additionally, if the income is over 2,000,000, apply a special bonus of 1% on the total tax amount.

Day-8 Assignment Questions
================================
1. Electricity Bill Calculator (With Slabs & Surcharge)
 Problem Statement:
Write a Java program to calculate the monthly electricity bill based on the number of units consumed, applying the following slab rates:
Units Consumed
Rate per Unit
0 - 100
₹1.50
101 - 200
₹2.00
201 - 300
₹3.00
Above 300
₹5.00

If the total bill exceeds ₹1000, apply a 10% surcharge.
If the user is a senior citizen, apply an additional 5% discount on the total.

Q2) 2. Online Shopping Cart Price Calculator (With Offers & Membership)
 Problem Statement:
Create a Java program to compute the total bill for a shopping cart. Conditions:

If total amount:
is ≥ ₹10,000, apply 20% discount
is ≥ ₹5000, apply 10% discount
else, no discount
If it’s a festival season, apply an extra 5% discount.
If the user has a premium membership, apply an additional ₹200 flat discount.
Show total price, all applied discounts, and final payable amount.

Q3)
Question:
Problem: Parking Fee Calculation
A parking system calculates the fee based on the following conditions:

Vehicle Type:
Car: ₹50 per hour
Bike: ₹30 per hour
Truck: ₹100 per hour


Discounts:
If the vehicle stays for more than 5 hours, a 20% discount is applied to the total parking fee.

Surcharge:
If the vehicle is parked between 6 PM and 8 AM, a 50% surcharge is applied to the total fee.

Input:
The program should prompt the user to enter the vehicle type (Car, Bike, or Truck).
The user should enter the arrival time (24-hour format, e.g., 14 for 2 PM).
The user should also enter the departure time (24-hour format, e.g., 18 for 6 PM).


Output:
The program should output the total parking fee based on the conditions above.

Constraints:
Assume that the parking times are in a 24-hour format.
Handle cases where parking times cross midnight (e.g., a vehicle parked from 10 PM to 2 AM).
For vehicles staying for more than 5 hours, apply the 20% discount.
For vehicles parked between 6 PM and 8 AM, apply the 50% surcharge.


Example:
Input:
Enter the vehicle type (Car, Bike, Truck): car
Enter the time of arrival (24-hour format, e.g., 14 for 2 PM): 14
Enter the time of departure (24-hour format, e.g., 18 for 6 PM): 20

Output:
Total parking fee: ₹300.0


Q4)
Employee Salary and Bonus Calculation
Problem:
An employee’s salary is calculated based on their performance, years of experience,
 and whether they are eligible for a bonus. The rules for the calculation are:
Base Salary:
Junior (Less than 2 years): ₹30,000
Mid-level (2 to 5 years): ₹50,000
Senior (More than 5 years): ₹70,000


Bonus:
Employees with a performance score of 8 or above get a 10% bonus on their salary.

Q5)Question:
Write a Java program to calculate the tax percentage based on income using nested if–else statements.
 The program should read an integer income and determine the tax percentage as per the rules below:
Income Range (₹)       Tax Percentage
≤ 10,000                0%
10,001 – 50,000         10%
50,001 – 100,000        20%
> 100,000               30%


Test Case 1:
Input:
5000
Output:
0%


Test Case 2:
Input:
20000
Output:
10%


Test Case 3:
Input:
75000
Output:
20%


Test Case 4:
Input:
120000
Output:
30%


Test Case 5:
Input:
10000
Output:
0%

Question 6)
Write a Java program to simulate traffic light behavior using nested if–else statements.

 The program should take:
A light state (Green, Yellow, or Red)
The hour (0–23 in 24-hour format)
 and display the vehicle’s action based on these rules:

If the light is Green, the action is “Go”.
If the light is Red, the action is “Stop”.

If the light is Yellow:
During daytime (6 AM to 6 PM) → “Slow”
During nighttime → “Stop”


Test Case 1:
Input:
Green 10
Output:
Go


Test Case 2:
Input:
Red 15
Output:
Stop


Test Case 3:
Input:
Yellow 9
Output:
Slow


Test Case 4:
Input:
Yellow 20
Output:
Stop


Test Case 5:
Input:
Green 23
Output:
Go


Question7)
Question:
Write a Java program to calculate and classify a person’s Body Mass Index (BMI) using nested if–else statements.
 The program should:

Take weight (in kilograms) and height (in meters) as input.
Compute BMI = weight / (height × height).


Display the category based on the following table:
BMI Range           Category
< 18.5            Underweight
18.5 – 24.9        Normal
25.0 – 29.9       Overweight
≥ 30.0             Obese

Test Case 1:
Input:
45 1.65
Output:
BMI: 16.53
Category: Underweight


Test Case 2:
Input:
70 1.75
Output:
BMI: 22.86
Category: Normal


Test Case 3:
Input:
85 1.70
Output:
BMI: 29.41
Category: Overweight


Test Case 4:
Input:
95 1.60
Output:
BMI: 37.11
Category: Obese


Test Case 5 (Edge case - BMI = 18.5):
Input:
56 1.75
Output:
BMI: 18.29
Category: Underweight


Test Case 6 (Edge case - BMI = 24.9):
Input:
76 1.75
Output:
BMI: 24.82
Category: Normal


Question 8):
Write a Java program to check whether a given number is a Perfect Square using nested if–else statements.
 A number n is said to be a Perfect Square if there exists an integer x such that x × x = n.

Test Case 1:
Input:
16
Output:
Perfect Square


Test Case 2:
Input:
12
Output:
Not Perfect Square


Test Case 3:
Input:
0
Output:
Perfect Square


Test Case 4:
Input:
25
Output:
Perfect Square


Test Case 5:
Input:
-9
Output:
Not Perfect Square'

The Question 9)
A geometry app classifies a quadrilateral based on four side lengths ($a, b, c, d$) and whether opposite sides are equal.
Output "Rectangle" if opposite sides are equal ($a=c$ and $b=d$).
Output "Square" if all sides are equal.
Output "Other" otherwise.
Input Format: Four integers a,b,c,d, separated by spaces.
Output Format: A string: "Square", "Rectangle", or "Other".
Example:
Input: 4 4 4 4
Output: Square


Test Case 1:
Input:
4 4 4 4
Output:
Square


Test Case 2:
Input:
4 6 4 6
Output:
Rectangle


Test Case 3:
Input:
3 4 5 6
Output:
Other


Test Case 4:
Input:
5 5 5 5
Output:
Square


Test Case 5:
Input:
2 3 2 3
Output:
Rectangle

Day-9 Assignment Questions
=============================
Q1)Problem Statement:
A library system calculates fines based on days overdue:
•	Code 1: 1–5 days → $1/day
•	Code 2: 6–10 days → $2/day
•	Code 3: >10 days → $5/day
The user inputs a code and days overdue, and the program outputs the total fine or "Invalid Code".

Input Format:
Two integers: code and days, separated by a space.

Output Format:
An integer (total fine) or the string "Invalid Code

Example
•	Input: 1 3
•	Output: 3

Constraints:
•	1 ≤ code ≤ 3
•	1 ≤ days ≤ 30
•	Use a switch statement

Question2)Problem Statement:
A company awards bonuses based on employee role:
•	Role Code 1 (Manager): 10% of salary
•	Role Code 2 (Developer): 5% of salary
•	Role Code 3 (Intern): $500 flat bonus
The user inputs a role code and salary, and the program outputs the bonus amount or "Invalid Role".

Input Format:
Two integers: code and salary, separated by a space.

Output Format:
An integer (bonus amount) or the string "Invalid Role".

Example:
•	Input: 1 50000
•	Output: 5000

Constraints:
•	1 ≤ code ≤ 3
•	1000 ≤ salary ≤ 100000
•	Use a switch statement


Question3)Problem Statement:
A hotel system prices rooms based on type and season:
•	Room Types:
o	1: Standard
o	2: Deluxe
•	Seasons:
o	1: Peak
o	2: Off-Peak
•	Prices:
o	Standard Room:
	Peak → $100
	Off-Peak → $80
o	Deluxe Room:
	Peak → $200
	Off-Peak → $150

Input Format:
Two integers: room and season, separated by a space.
Output Format:
One of:
"$100", "$80", "$200", "$150", or "Invalid Input"

Example:
•	Input: 1 1
•	Output: $100

Constraints:
•	1 ≤ room ≤ 2
•	1 ≤ season ≤ 2
•	Use a switch statement for room type

Question4)QUESTION (Problem Statement)
A tax calculator applies rates based on region:
•	1 for North: 5%
•	2 for South: 6%
•	3 for East: 7%
•	4 for West: 8%
The user provides a region code and income, and the program calculates the tax based on the region’s percentage rate. If the region code is not between 1 and 4, the output should be "Invalid Region".
 
 Input Format:
Two integers — code and income, separated by a space.

 Output Format:
Print an integer (tax amount) or the string "Invalid Region"

 Constraints:
•	1 ≤ code ≤ 4
•	0 ≤ income ≤ 1,000,000
•	Use a switch statement


Question5) (Weather Alert System)
A weather app issues alerts based on:
•	Condition code:
.	1 = Sunny
.	2 = Rainy
.	3 = Stormy
•	Temperature (in °C):
.	If condition is Stormy and temperature < 10°C, print "Severe Warning"
.	Otherwise, print the condition name.
.	If the code is not 1–3, print "Invalid Condition".

🔹 Input Format:
Two integers:
code (1 to 3) and temp (−20 to 50), separated by space.

🔹 Output Format:
A single string:
"Sunny", "Rainy", "Stormy", "Severe Warning", or "Invalid Condition"

 Example Input:
1 20

Example Output:
Sunny


Question 6)Java Programming Question: Advanced Canteen System
Question:
Problem Statement:
You are tasked with developing an Canteen System for a small canteen that handles ordering and billing. The system should present a menu with options for ordering tea, coffee, and samosas. The user can place orders, view their bill, and check out. The program should:
Display the canteen menu showing the price of each item (tea, coffee, samosas).


Allow the user to order items by selecting the item number (1 for Tea, 2 for Coffee, 3 for Samosa) and entering the quantity.

View the bill that shows:
The total cost of each item ordered.
The subtotal (sum of the cost of all ordered items).
A 5% tax on the subtotal.
The grand total, which includes the subtotal and tax.
Allow the user to checkout and exit the system.
The program should continuously display the menu of options until the user chooses to exit. The switch-case statement should be used to implement the logic for handling different user choices.

Requirements:
Use the switch-case statement for handling different options such as:
Viewing the menu.
Ordering items.
Viewing the bill.
Exiting the system.

Each item in the menu (Tea, Coffee, Samosa) should have a fixed price:
Tea: ₹10
Coffee: ₹15
Samosa: ₹20
The tax rate should be set to 5% of the subtotal.


Item quantity validation:
If the user enters an invalid quantity (less than or equal to 0), display an error message.
If the user selects an invalid item number, display an error message.
If the user selects an option not available in the menu (i.e., any number other than 1, 2, 3, or 4), show an error message.

Once the user selects "Checkout and Exit", print a thank you message and exit the system.


Testcase -1 Order 2 Samosas and View Bill
=========================================
||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 1


--- MENU ---
1. Tea     - ₹10
2. Coffee  - ₹15
3. Samosa  - ₹20


||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 2
Enter item number to order (1-3): 3
Enter quantity: 2
2 Samosa(s) added.


||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 3


--- BILL ---
Samosa x2 = ₹40
Subtotal = ₹40
Tax (5%) = ₹2.0
Total = ₹42.0


Test Case 2: Order 3 Teas and View Bill
—-----------------------------------------------
||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 2
Enter item number to order (1-3): 1
Enter quantity: 3
3 Tea(s) added.


||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 3


--- BILL ---
Tea x3 = ₹30
Subtotal = ₹30
Tax (5%) = ₹1.5
Total = ₹31.5


Test Case 3: Order 2 Coffees + 1 Tea and View Bill
—---------------------------------------------------------------
||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 2
Enter item number to order (1-3): 2
Enter quantity: 2
2 Coffee(s) added.


||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 2
Enter item number to order (1-3): 1
Enter quantity: 1
1 Tea(s) added.


||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 3


--- BILL ---
Tea x1 = ₹10
Coffee x2 = ₹30
Subtotal = ₹40
Tax (5%) = ₹2.0
Total = ₹42.0


Test Case 4: Invalid Quantity (0) and Exit
—-----------------------------------------------------
||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 2
Enter item number to order (1-3): 1
Enter quantity: 0
Quantity must be greater than 0.


||=========== CANTEEN MENU ===========||
1. View Menu
2. Order Items
3. View Bill
4. Checkout and Exit
Enter your choice: 4
Thank you! Exiting system


Day-10 Assignment Questions
============================

frequntly asked Interview Questions
===================================
Question-1). Multiplication Table – Math Helper App

Scenario:
A student uses a math app that helps them practice multiplication tables.
Write a program that takes a number and prints its multiplication table up to 10.

Sample Input:

5

Sample Output:
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50


Test Cases:

testcase-1
Input: 3
Output:
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
3 x 10 = 30

testcase-2
Input: 7
Output:
7 x 1 = 7
...
7 x 10 = 70

testcase-3
Input: 10
Output:
10 x 1 = 10
...
10 x 10 = 100

Question-2). Count Digits – Mobile PIN Analyzer

Scenario:
A mobile app checks how many digits are in the entered PIN.

Sample Input:
78956

Sample Output:
5


Test Cases:

testcase-1
Input: 1234
Output: 4

testcase-2
Input: 9
Output: 1

testcase-3
Input: 100000
Output: 6


 Question-3).Sum of Digits – Digital Sum Finder
Scenario:
A payment app calculates a checksum by summing digits of a transaction ID.

Sample Input:
1234

Sample Output:
10

Test Cases:

testcase-1
Input: 987
Output: 24

testcase-2
Input: 56
Output: 11

testcase-3
Input: 1005
Output: 6

 Question-4). Factorial – Combinatorics Calculator
Scenario:
A calculator app computes factorials for permutation formulas.

Sample Input:
5

Sample Output:
120

Test Cases:

testcase-1
Input: 3
Output: 6

testcase-2
Input: 6
Output: 720

testcase-3
Input: 0
Output: 1


 Question-5). Armstrong Number – Number Magic Game
Scenario:
A number puzzle app checks if a number is an Armstrong number.

Sample Input:
153

Sample Output:
Armstrong Number


Test Cases:

testcase-1
Input: 370
Output: Armstrong Number

testcase-2
Input: 371
Output: Armstrong Number

testcase-3
Input: 123
Output: Not Armstrong




Question-6) Reverse Number – Mirror Number App

Scenario:
A mirror app reverses any number entered by the user.

Sample Input:
1234

Sample Output:
4321

Test Cases:

testcase-1
Input: 9876
Output: 6789

testcase-2
Input: 120
Output: 21

testcase-3
Input: 1001
Output: 1001




 Question-7) Palindrome Number – Number Pal Game

Scenario:
A number game rewards players if the entered number reads the same forward and backward.

Sample Input:
121

Sample Output:
Palindrome


Test Cases:

testcase-1
Input: 1221
Output: Palindrome

testcase-2
Input: 123
Output: Not Palindrome

testcase-3
Input: 101
Output: Palindrome




Question-8) Fibonacci Series – Nature Sequence Generator

Scenario:
A biology simulator models growth patterns using Fibonacci numbers.

Sample Input:
7
Sample Output:
0 1 1 2 3 5 8


Test Cases:

testcase-1
Input: 5
Output: 0 1 1 2 3

testcase-2
Input: 8
Output: 0 1 1 2 3 5 8 13

testcase-3
Input: 10
Output: 0 1 1 2 3 5 8 13 21 34



Question-9) Sum of Even and Odd Numbers – Statistics Analyzer

Scenario:
An analytics app finds the total of even and odd numbers up to a limit n.

Sample Input:
10


Sample Output:
Sum of even numbers: 30
Sum of odd numbers: 25


Test Cases:

testcase-1
Input: 5
Output:
Sum of even numbers: 6
Sum of odd numbers: 9

testcase-2
Input: 8
Output:
Sum of even numbers: 20
Sum of odd numbers: 16

testcase-3
Input: 3
Output:
Sum of even numbers: 2
Sum of odd numbers: 4



Question-10) Prime Numbers up to N – Prime Finder Tool

Scenario:
A cryptography app generates prime numbers up to n for key creation.

Sample Input:
10


Sample Output:
2 3 5 7


Test Cases:

testcase-1
Input: 5
Output: 2 3 5

testcase-2
Input: 15
Output: 2 3 5 7 11 13

testcase-3
Input: 20
Output: 2 3 5 7 11 13 17 19




looping statements and jumping statements Assignment Questions
=================================================================
for-loop
============
Question-1)
 Longest Increasing Subsequence (Stock Market App)
Problem Statement:
A stock market app analyzes N daily prices to find the length of the longest increasing subsequence — consecutive prices where each day’s price is strictly greater than the previous day’s price.
You need to write a Java program that reads the number of days (N) and the list of prices, then outputs the length of the longest increasing sequence.
This helps traders identify upward trends in the market.
 The program should use loops to track increasing sequences.

Input Format:
First line: An integer N, the number of daily prices.


Second line: N space-separated integers, representing the stock prices.


Output Format:
Print a single integer — the length of the longest increasing subsequence.


Example Input:
5
1 2 3 4 5
Example Output:
5

Test Case 1:
Input:
6
10 20 10 30 40 50
Output:
4
Explanation:
The longest increasing subsequence is 10 30 40 50, which has length 4.

Test Case 2:
Input:
7
5 5 5 5 5 5 5
Output:
1
Explanation:
All prices are equal; no increase occurs, so the longest sequence length is 1.

Test Case 3:
Input:
8
3 4 1 2 3 0 1 2
Output:
3
Explanation:
There are multiple increasing sequences, and the longest (1 2 3) has length 3.

Question-2)
Sum of Prime Numbers up to N (Math Research Tool)
Problem Statement:
A math research tool calculates the sum of all prime numbers up to N to study their distribution.
 The user inputs a value N, and the program outputs the sum of all prime numbers from 2 to N (inclusive).
This program helps researchers explore prime number patterns in number theory.
 The program should use a loop to identify and sum prime numbers.
Input Format:
A single integer N.


Output Format:
A single integer — the sum of all prime numbers from 2 to N.



Example Input:
10
Example Output:
17
Explanation:
Prime numbers less than or equal to 10 are 2, 3, 5, and 7.
 Sum = 2 + 3 + 5 + 7 = 17.

Test Case 1:
Input:
5
Output:
10
Explanation:
Prime numbers ≤ 5 are 2, 3, 5 → Sum = 10.

Test Case 2:
Input:
20
Output:
77
Explanation:
Prime numbers ≤ 20 are 2, 3, 5, 7, 11, 13, 17, 19 → Sum = 77.

Test Case 3:
Input:
2
Output:
2
Explanation:
Only one prime number (2) ≤ 2 → Sum = 2.


Question3)Collatz Sequence Length
Problem Statement:
A computational mathematics program analyzes the Collatz sequence (also known as the 3n + 1 sequence) for a given positive integer N.
The sequence is defined as follows:
Start with any positive integer N.


Then, for each term:


If the current number is even, divide it by 2.


If the current number is odd, multiply it by 3 and add 1.


Continue this process until the value becomes 1.


The task is to write a program that calculates the total number of terms (including the starting number) in the Collatz sequence for a given N.

Input Format:
A single integer N (the starting number).


Output Format:
A single integer — the total length of the Collatz sequence (including the starting number).



Example Input:
6
Example Output:
9
Explanation:
The Collatz sequence for 6 is:
 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1
 There are 9 terms in total, so the output is 9.

Test Case 1:
Input:
1
Output:
1
Explanation:
Sequence: 1 → only one term, so length = 1.

Test Case 2:
Input:
7
Output:
17
Explanation:
The sequence starting from 7 has 17 terms until it reaches 1.

Test Case 3:
Input:
10
Output:
7
Explanation:
Sequence: 10 → 5 → 16 → 8 → 4 → 2 → 1
 Total terms = 7.


Question-4)Palindromic Numbers Counter
Problem Statement:
A number puzzle app counts how many palindromic numbers exist from 1 to N.
 A palindromic number is a number that reads the same forward and backward (for example, 121, 44, 7).
The user inputs an integer N, and the program outputs how many such palindromic numbers exist between 1 and N (inclusive).
This helps users explore the interesting properties of numbers.
 The program should use a loop to check each number.

Input Format:
A single integer N


Output Format:
A single integer — the count of palindromic numbers from 1 to N




Example Input:
10
Example Output:
9
Explanation:
Numbers from 1 to 10 →
 Palindromic numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9 → total = 9

Test Case 1:
Input:
15
Output:
14
Explanation:
Palindromic numbers from 1 to 15 → 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15
 Wait — only 11 is palindromic beyond 9 → total = 10
(Correction applied — only 1–9 and 11 are palindromic → 10 total)

Test Case 2:
Input:
50
Output:
14
Explanation:
Palindromic numbers ≤ 50 →
 1–9, 11, 22, 33, 44 → total = 14

Test Case 3:
Input:
100
Output:
18
Explanation:
Palindromic numbers ≤ 100 →
 1–9, 11, 22, 33, 44, 55, 66, 77, 88, 99 → total = 18



While-loop
=========
Question-5)Single Digit Numerology (Digit Sum Reduction)
Problem Statement:
A numerology app reduces a given number to a single digit by repeatedly summing its digits.
 For example, if the user enters 123, the app performs the calculation:
 1 + 2 + 3 = 6
If the result still has more than one digit, the process repeats until a single-digit number is obtained.
The program should use a while loop to perform this digit-summing process.
 This activity helps users explore mystical number properties in numerology.

 Input Format:
A single integer N


 Output Format:
A single integer — the single-digit sum after repeated digit reductions.



Example Input:
123
 Example Output:
6
Explanation:
Step 1: 1 + 2 + 3 = 6 → Single digit reached → Output = 6

 Test Case 1:
Input:
9999
Output:
9
Explanation:
9 + 9 + 9 + 9 = 36 → 3 + 6 = 9 → Output = 9

 Test Case 2:
Input:
9875
Output:
2
Explanation:
9 + 8 + 7 + 5 = 29 → 2 + 9 = 11 → 1 + 1 = 2 → Output = 2

 Test Case 3:
Input:
5
Output:
5
Explanation:
Already a single digit → Output = 5

Question-6)Triangular Numbers Generator
Problem Statement:
A math app generates triangular numbers, which form a special number pattern:
 1, 3, 6, 10, 15, ...
Each triangular number represents the sum of the first n natural numbers and is given by the formula:
Tn=n(n+1)2T_n = \frac{n(n + 1)}{2}Tn​=2n(n+1)​
or additively:
1
1 + 2 = 3
1 + 2 + 3 = 6
1 + 2 + 3 + 4 = 10
...

The app takes a number N and prints all triangular numbers less than or equal to N, using a while loop.

 Input Format:
A single integer N


 Output Format:
Space-separated integers — all triangular numbers ≤ N


 Example Input:
10
 Example Output:
1 3 6 10


 Test Case 1:
Input:
20
Output:
1 3 6 10 15
Explanation:
Triangular numbers up to 20 are 1, 3, 6, 10, and 15.

 Test Case 2:
Input:
5
Output:
1 3
Explanation:
Triangular numbers ≤ 5 are 1 and 3.
 Test Case 3:
Input:
1
Output:
1
Explanation:
Only one triangular number (1) ≤ 1.


Question-7)Smallest Power Finder
Problem Statement:
A scientific app determines the smallest power of K (Kⁱ) that is greater than or equal to N.
The user inputs two integers N and K, and the program outputs the smallest exponent i such that:
This concept is useful in exponential growth analysis and computational modeling.
 The program must use a while loop to compute powers of K until the condition is satisfied.
 Input Format:
Two integers N and K, separated by a space.


 Output Format:
A single integer — the smallest exponent i such that Ki≥NK^i \geq NKi≥N.



 Example Input:
10 2
 Example Output:
4

Explanation:
2^1 = 2
2^2 = 4
2^3 = 8
2^4 = 16   (first power ≥ 10)

Hence, the smallest exponent i = 4.
 Test Case 1:
Input:
100 3
Output:
5
Explanation:
3¹=3, 3²=9, 3³=27, 3⁴=81, 3⁵=243 → smallest power ≥ 100 → i = 5.

 Test Case 2:
Input:
25 5
Output:
2
Explanation:
5¹=5, 5²=25 → first power ≥ 25 → i = 2.

 Test Case 3:
Input:
50 10
Output:
2
explanation:
10¹=10, 10²=100 → first power ≥ 50 → i = 2.

Question-8)
Palindromic Numbers Counter
Problem Statement:
A number puzzle app counts how many palindromic numbers (numbers that read the same forward and backward, e.g., 121, 44, 7) exist from 1 to N.
The user inputs a number N, and the program outputs the count of such numbers between 1 and N (inclusive).
This problem helps users explore number patterns and symmetry in mathematics.
 The program must use a while loop to check each number for palindromic properties.

 Input Format:
A single integer N


 Output Format:
A single integer — the count of palindromic numbers from 1 to N.


 Constraints:
1≤N≤10001 \leq N \leq 10001≤N≤1000


Must use a while loop


 Example Input:
10

 Example Output:
9

Explanation:
Numbers from 1 to 10 →
 Palindromic numbers: 1, 2, 3, 4, 5, 6, 7, 8, 9 → total = 9

Test Case 1:
Input:
15
Output:
10
Explanation:
Palindromic numbers ≤ 15 → 1–9, 11 → total = 10

 Test Case 2:
Input:
50
Output:
14
Explanation:
Palindromic numbers ≤ 50 → 1–9, 11, 22, 33, 44 → total = 14

 Test Case 3:
Input:
100
Output:
18
Explanation:
Palindromic numbers ≤ 100 → 1–9, 11, 22, 33, 44, 55, 66, 77, 88, 99 → total = 18


Question-9)Sum Until Repeated Number
Problem Statement:
A data collection app processes a stream of numbers and sums them until a number is repeated.
The user enters a sequence of integers (one per line) ending with 0.
 When the program detects a number that has already appeared before, it includes that number in the sum and then stops reading further input.
This helps identify data anomalies where values are accidentally duplicated during entry.
 The program must use a while loop to read input and track previously seen numbers.

 Input Format:
A sequence of integers, one per line, ending with 0.


 Output Format:
A single integer — the sum of numbers up to and including the first repeated number.


Constraints:
0≤number≤1000 \leq \text{number} \leq 1000≤number≤100


Input stops when 0 is entered.


Must use a while loop.



 Example Input:
1
2
1
0

 Example Output:
4
Explanation:
The numbers entered are: 1, 2, 1
The second 1 is a repeat, so we sum all numbers up to and including it:
 1 + 2 + 1 = 4


Test Case 1:
Input:
3
5
7
5
0
Output:
20
Explanation:
Sequence → 3, 5, 7, 5 → repeat found at 5
 Sum = 3 + 5 + 7 + 5 = 20

 Test Case 2:
Input:
4
6
8
10
0
Output:
28
Explanation:
No number repeats before 0 → Sum of all numbers = 28

 Test Case 3:
Input:
2
2
0
Output:
4
Explanation:
First repetition found immediately → 2 + 2 = 4




Do-while
==============

Question-10)Triangular Numbers using Do-While Loop
Problem Statement:
A math app generates triangular numbers — numbers that can form an equilateral triangle when represented as dots.
 The sequence begins as:
 1, 3, 6, 10, 15, …
The n-th triangular number is given by the formula:
Tn=n(n+1)2T_n = \frac{n(n + 1)}{2}Tn​=2n(n+1)​
The program should take a number N as input and print all triangular numbers ≤ N, using a do-while loop.
The do-while loop ensures that the body executes at least once, even if N < 1.
This task helps students understand additive sequences and loop control structures.

 Input Format:
A single integer N
 Output Format:
Space-separated integers — all triangular numbers ≤ N



Must use a do-while loop



 Example Input:
10
 Example Output:
1 3 6 10

 Explanation:
Triangular numbers ≤ 10 are calculated as:
 1 → 1
 1 + 2 → 3
 1 + 2 + 3 → 6
 1 + 2 + 3 + 4 → 10
Hence, output: 1 3 6 10

 Test Case 1:
Input:
20
Output:
1 3 6 10 15

 Test Case 2:
Input:
3
Output:
1 3

 Test Case 3:
Input:
1
Output:
1


Question-11)
Palindromic Numbers Counter (Do-While Loop)
Problem Statement:
A number puzzle app counts palindromic numbers (numbers that read the same forward and backward, e.g., 121) from 1 to N.
The user inputs a number N, and the program outputs the count of palindromic numbers from 1 to N.
The do-while loop ensures that at least one number is checked, helping users practice pattern recognition skills.

 Input Format:
A single integer N
 Output Format:
A single integer — the count of palindromic numbers from 1 to N

📋 Constraints:
1≤N≤10001 \le N \le 10001≤N≤1000


Must use a do-while loop


 Example Input:
10
Example Output:
9
Explanation:
Numbers from 1 to 10 → palindromic numbers: 1, 2, 3, 4, 5, 6, 7, 8, 9 → total = 9

 Test Case 1:
Input:
15
Output:
10
Explanation:
Palindromic numbers ≤ 15 → 1–9, 11 → total = 10

Test Case 2:
Input:
50
Output:
14
Explanation:
Palindromic numbers ≤ 50 → 1–9, 11, 22, 33, 44 → total = 14

 Test Case 3:
Input:
100
Output:
18
Explanation:
Palindromic numbers ≤ 100 → 1–9, 11, 22, 33, 44, 55, 66, 77, 88, 99 → total = 18


Question-12) Armstrong Number Check (Do-While Loop)
Problem Statement:
A puzzle app checks if a number is an Armstrong number.
An Armstrong number is a number such that the sum of its digits raised to the power of the number of digits equals the number itself.
For example:
153=13+53+33153 = 1^3 + 5^3 + 3^3153=13+53+33
The program should take a number N as input and output "Armstrong" if it satisfies the condition, or "Not Armstrong" otherwise.
The do-while loop ensures that at least one digit is processed.
 Input Format:
A single integer N
Output Format:
A string — "Armstrong" or "Not Armstrong"

 Constraints:
1≤N≤1091 \le N \le 10^91≤N≤109


Must use a do-while loop


 Example Input:
153
Example Output:
Armstrong

 Explanation:
Count digits of N → 153 has 3 digits, so power P = 3.


Sum of digits raised to P:


13+53+33=1+125+27=1531^3 + 5^3 + 3^3 = 1 + 125 + 27 = 15313+53+33=1+125+27=153
Compare sum with N → 153 = 153 → Output: "Armstrong"


 Test Case 1:
Input:
9474
Output:
Armstrong
Explanation:
9474 has 4 digits → 9^4 + 4^4 + 7^4 + 4^4 = 9474 → "Armstrong"

Test Case 2:
Input:
123
Output:
Not Armstrong
Explanation:
1^3 + 2^3 + 3^3 = 36 ≠ 123 → "Not Armstrong"


Question-13)Least Common Multiple (LCM) Using Do-While Loop
Problem Statement:
A scheduling app determines the smallest number that is a multiple of both A and B (i.e., the LCM of A and B).
The user inputs two integers A and B, and the program outputs the smallest common multiple.
The do-while loop ensures at least one check, helping users iterate efficiently in event planning scenarios.

 Input Format:
Two integers A and B, separated by a space.
 Output Format:
A single integer — the smallest number divisible by both A and B

 Constraints:
1≤A,B≤1061 \le A, B \le 10^61≤A,B≤106


Must use a do-while loop


 Example Input:
5 8
 Example Output:
40
Explanation:
 Multiples of 8: 8, 16, 24, 32, 40 → first multiple divisible by 5 is 40.
 Note: The previous output in the image (24) was incorrect.

Test Case 1:
Input:
6 9
Output:
18
Explanation:
Multiples of 9: 9, 18 → first divisible by 6 is 18

 Test Case 2:
Input:
12 15
Output:
60
Explanation:
Multiples of 15: 15, 30, 45, 60 → first divisible by 12 is 60

 Test Case 3:
Input:
7 3
Output:
21
Explanation:
Multiples of 7: 7, 14, 21 → first divisible by 3 is 21


Question14)Generate Square Numbers (Do-While Loop)
Problem Statement:
A math app generates square numbers:
1,4,9,16,…1, 4, 9, 16, \dots1,4,9,16,…
The sequence generation stops when either:
The square exceeds a given limit N


The total count of squares reaches a maximum M


The user inputs N and M, and the program outputs the squares.
The do-while loop ensures that at least one square is generated, helping users understand quadratic sequences.

 Input Format:
Two integers N and M, separated by a space.
 Output Format:
Space-separated integers — square numbers ≤ N, up to M numbers.

 Constraints:
1≤N≤1061 \le N \le 10^61≤N≤106


1≤M≤1001 \le M \le 1001≤M≤100


Must use a do-while loop



 Example Input:
10 3
 Example Output:
1 4 9

 Explanation:
Start with i = 1
Calculate i² = 1 → ≤ 10 → print 1
Increment i = 2 → i² = 4 → ≤ 10 → print 4
Increment i = 3 → i² = 9 → ≤ 10 → print 9
Increment i = 4 → i² = 16 → > 10 → stop
The count of numbers printed is 3, which matches the maximum M = 3.

 Test Case 1:
Input:
20 5
Output:
1 4 9 16
Explanation:
Squares ≤ 20: 1, 4, 9, 16 → count = 4 ≤ M = 5

Test Case 2:
Input:
50 3
Output:
1 4 9
Explanation:
Maximum count M = 3 reached → stop after 3 numbers

Test Case 3:
Input:
5 10
Output:
1 4
Explanation:
Squares ≤ 5: 1, 4 → count = 2 < M = 10 → stop


Break and Continue
=====================
Question-15) Sum Numbers Until Armstrong (Using Break & Continue)
Problem Statement:
A number puzzle app processes a sequence of numbers and sums them until an Armstrong number is encountered.
Skip zeros: If a number is 0, it is ignored.


Stop on Armstrong number: If a number is an Armstrong number (sum of its digits raised to the power of the number of digits equals the number), summation stops immediately.


The program outputs the sum of numbers before the first Armstrong number.
This challenges advanced number recognition and understanding of flow control (break and continue).

 Input Format:
First line: an integer N — the count of numbers to process.


Second line: N space-separated integers — the sequence of numbers.


 Output Format:
A single integer — the sum of numbers before an Armstrong number is encountered.

 Example Input:
5
10 20 153 30 40
 Example Output:
30
Explanation:
Sequence: 10, 20, 153, 30, 40


0 → skipped (none here)
10 + 20 = 30
153 → first Armstrong number → stop summation
Output: 30


 Test Case 1:
Input:
6
0 5 370 10 0 20
Output:
5
Explanation:
Skip 0 → sum = 0
5 → not Armstrong → sum = 5
370 → Armstrong → stop → output = 5


 Test Case 2:
Input:
4
0 1 2 3
Output:
0
Explanation:
0 → skipped
1 → Armstrong → stop → output = 0


Question-16)Product of Non-Composite Numbers (Using Break & Continue)
Problem Statement:
A math app processes a sequence of N numbers and calculates the product of non-composite numbers (1 and prime numbers).
Skip composite numbers using continue


Stop on zero using break (indicating a data boundary)


This focuses on primes and ones, challenging number recognition and flow control usage.

 Input Format:
First line: an integer N — the number of numbers to process


Second line: N space-separated integers — the sequence of numbers


 Output Format:
A single integer — the product of all non-composite numbers before a zero is encountered.

 Example Input:
5
2 4 3 6 7
 Example Output:
42
Explanation:
Sequence: 2, 4, 3, 6, 7
Skip composite numbers: 4 and 6 → ignored
Multiply non-composite numbers: 2 × 1 × 3 × 1 × 7 → 42
Output: 42



 Test Case 1:
Input:
6
1 5 0 3 4 7
Output:
5
Explanation:
1 → non-composite → multiply: 1
5 → prime → multiply: 1 × 5 = 5
0 → stop → output: 5


 Test Case 2:
Input:
4
4 6 8 9
Output:
1
Explanation:
All numbers are composite → skipped → product remains 1



Question-17)Sum Until Perfect Number (Using Break & Continue)
Problem Statement:
A number app sums N numbers until a perfect number is encountered.
Skip negative numbers using continue


Stop on perfect number using break


A perfect number is a number equal to the sum of its proper divisors (excluding itself), e.g., 6 = 1+2+3.

 Input Format:
First line: an integer N — the count of numbers that follow


Second line: N space-separated integers — the sequence of numbers



 Output Format:
A single integer — the sum of non-negative numbers before a perfect number is encountered.

Constraints:
1≤N≤1001 \le N \le 1001≤N≤100
Each number: −1000≤num≤1000-1000 \le \text{num} \le 1000−1000≤num≤1000
Must use break and continue


 Example Input:
5
10 -5 20 6 30
 Example Output:
30
Explanation:
Sequence: 10, -5, 20, 6, 30
Skip negative numbers: -5 → ignored
Sum before perfect number 6: 10 + 20 = 30
Stop on 6 → output: 30



 Test Case 1:
Input:
6
1 28 -3 12 6 7
Output:
1
Explanation:
Sequence: 1, 28, -3, 12, 6, 7
1 → non-negative, not perfect → add: sum = 1
28 → perfect → stop → output = 1



 Test Case 2:
Input:
4
-2 -5 -10 6
Output:
0
Explanation:
All negative numbers → skipped
6 → perfect → stop → sum = 0


Question-18)Sum Numbers Not Divisible by Digit Sum (Using Break & Continue)
Problem Statement:
A number app processes N numbers and sums only those numbers that are NOT divisible by the sum of their digits.
Skip numbers divisible by their digit sum using continue
Stop on zero using break


This explores digit-based number properties.

 Input Format:
First line: an integer N — the count of numbers that follow
Second line: N space-separated integers — the sequence of numbers


 Output Format:
A single integer — the sum of numbers not divisible by their digit sum before zero is encountered.

 Constraints:
Must use break and continue

Number        DigitSum           Divisible by Digit Sum?              Action              Running Sum
12              1+2=3                 12 % 3 = 0 →Yes                 SKIP                    0
15              1+5=6                  15 % 6 ≠ 0 → No                ADD                     15
20              2+0=2                   20 % 2 = 0 → Yes              SKIP                     15
24               2+4=6                   24 % 6 = 0 → Yes             SKIP                     15
0                N/A                      STOP                           BREAK                     15



 Test Case 1:
Input:
6
11 22 33 44 55 0
Output:
0
Explanation: All numbers are divisible by their digit sum → skipped → sum = 0

 Test Case 2:
Input:
5
13 17 19 20 0
Output:
49
Explanation:
13 → 1+3=4, 13%4≠0 → add → sum=13
17 → 1+7=8, 17%8≠0 → add → sum=30
19 → 1+9=10, 19%10≠0 → add → sum=49
20 → 2+0=2, 20%2=0 → skip
0 → stop → sum=49


Question-19)Sum Numbers with Unique Digits (Using Break & Continue)
Problem Statement:
A number app processes N numbers and sums only those numbers that have no repeated digits.
Skip numbers with repeated digits using continue


Stop on negative number using break


This tests digit uniqueness in numbers.

 Input Format:
First line: an integer N — the count of numbers that follow


Second line: N space-separated integers — the sequence of numbers


 Output Format:
A single integer — the sum of numbers without repeated digits before a negative number is encountered.

 Example Input:
5
12 13 22 34 45
 Example Output:
69
Explanation:
Number      Repeated Digits?         Action        Running Sum
12             No                      ADD             12
13             No                     ADD              25
22             Yes                   SKIP              25
34            No                      ADD              59
45            No                     ADD               104


Note: If a negative number occurs, the loop would stop immediately using break.




Day-11 Assignment Questions on single dimesional Array
============================================================
Question-1) Question: Maximum Profit Range (Kadane’s Algorithm)
Topic: Single Dimensional Array Examples
Scenario
In the financial hub of TradeCity, a trader records the daily change in stock prices (profits and losses) in an array.
A positive number means the stock price increased 📈.


A negative number means the stock price decreased 📉.


Now, the trader wants to know the maximum profit that could be earned by buying and selling within a certain range of days.
 In other words, for each given range of days [L, R], find the maximum sum of any contiguous subarray within that range.
If all numbers are negative, return the largest (least negative) single value from that range.

Input Format
The first line contains two integers:
n → number of days (size of array)
q → number of queries.

The second line contains n integers — the daily stock changes.
Next q lines each contain two integers L and R — the day range (1-based indexing).

Output Format
For each query, print a single integer — the maximum subarray sum in that range.

TestCase-1
Input
5 2
1 -2 3 4 -5
1 3
2 5
Output
3
7
Explanation
Query 1: [1, -2, 3] → Max subarray = [3] = 3
Query 2: [-2, 3, 4, -5] → Max subarray = [3, 4] = 7


 TestCase-2
Input
6 3
-2 -3 4 -1 -2 1
1 6
1 3
3 5
Output
4
4
4
Explanation
[ -2, -3, 4, -1, -2, 1 ] → Best subarray [4] = 4
[ -2, -3, 4 ] → [4] = 4
[ 4, -1, -2 ] → [4] = 4


 TestCase-3
Input
4 2
-5 -2 -8 -1
1 4
2 3
Output
-1
-2
Explanation
All numbers are negative, so we take the least negative:
[ -5, -2, -8, -1 ] → -1
[ -2, -8 ] → -2



 TestCase-4
Input
8 3
2 3 -6 4 2 -1 2 3
1 8
2 5
4 8
Output
7
6
10
Explanation
1️ Range [1, 8] → [2, 3, -6, 4, 2, -1, 2, 3] → Best subarray [4, 2, -1, 2, 3] = 10
 2️ Range [2, 5] → [3, -6, 4, 2] → Best subarray [4, 2] = 6
 3️ Range [4, 8] → [4, 2, -1, 2, 3] → Best subarray [4, 2, -1, 2, 3] = 10

 TestCase-5
Input
5 2
10 -3 5 -2 1
1 5
2 4
Output
11
5
Explanation
[10, -3, 5, -2, 1] → Max subarray [10, -3, 5, -2, 1] = 11
[ -3, 5, -2 ] → Max subarray [5] = 5



Question-2) Problem Title: Water Usage Adjustment System – Aquaville City
Scenario (Question)
In the city of Aquaville, the municipal water system monitors the daily water usage at different stations, represented as an array.
During maintenance periods, adjustments are made to the water usage records by adding or subtracting a given value across a range of stations.
 However, water usage at any station can never become negative — if an operation would reduce a station’s usage below zero, it should be reset to 0.
You must simulate all the maintenance adjustments and display the final water usage at all stations after all operations.

Input Format
First line: Two integers —
N → Number of stations (array size)
Q → Number of queries (maintenance operations)
Second line: N integers — initial water usage of each station.
Next Q lines: Each line has three integers L, R, X
L = starting index (1-based)
R = ending index (1-based)
X = adjustment value (positive for addition, negative for subtraction)



Output Format
Print N integers — the final water usage at each station after all queries,
 ensuring that no station has a negative value.
Constraints
1 ≤ N, Q ≤ 1000

Example Input
5 2
10 20 30 40 50
1 3 -5
2 4 10
Example Output
5 25 35 50 50

Explanation
1️ Query 1: Subtract 5 from stations 1–3
 Initial → [10, 20, 30, 40, 50]
 After Query 1 → [5, 15, 25, 40, 50]
2️ Query 2: Add 10 from stations 2–4
 After Query 2 → [5, 25, 35, 50, 50]
 Final Output → 5 25 35 50 50

Test Cases
 Test Case 1
Input
5 2
10 20 30 40 50
1 3 -5
2 4 10
Output
5 25 35 50 50
Explanation:
 Subtract 5 (1–3): [5,15,25,40,50]
 Add 10 (2–4): [5,25,35,50,50]

 Test Case 2
Input
4 3
5 10 15 20
1 2 -10
2 3 5
3 4 -20
Output
0 5 0 0
Explanation:
 1️ Subtract 10 (1–2): [0,0,15,20]
 2️ Add 5 (2–3): [0,5,20,20]
 3️ Subtract 20 (3–4): [0,5,0,0]

 Test Case 3
Input
6 2
8 12 10 5 15 20
3 6 -8
1 4 5
Output
13 17 7 2 7 12
Explanation:
 1️ Subtract 8 (3–6): [8,12,2,0,7,12]
 2️ Add 5 (1–4): [13,17,7,5,7,12] → But (station 4) 5 is correct since no negative applied.

 Test Case 4
Input
5 1
3 0 2 4 1
2 5 -3
Output
3 0 0 1 0
Explanation:
 Subtract 3 (2–5): [3,-3,-1,1,-2] → [3,0,0,1,0]

 Test Case 5
Input
5 3
100 200 300 400 500
1 5 -50
3 5 -400
2 4 100
Output
50 250 0 100 100
Explanation:
 1️ Subtract 50 (1–5): [50,150,250,350,450]
 2️ Subtract 400 (3–5): [50,150,0,0,50]
 3️ Add 100 (2–4): [50,250,100,100,50]



Question-3) Question: MusicFest Ticket Rotation
Problem Statement:
In the grand MusicFest, a row of seats is allocated tickets with specific values (representing ticket types) in an array.
The organizer wants to reallocate tickets in specific ranges by rotating the values to the left.
For example:
 If [1, 2, 3] is rotated left by 1, it becomes [2, 3, 1].
You need to write a program that:
Processes multiple rotation queries.


Each query defines:


The start and end range of seats.


The number of left rotations.


Finally, print the updated ticket arrangement after all queries.


Input Format:
The first line contains two integers —
 N → number of seats (array size)
 Q → number of rotation queries


The second line contains N integers — the initial ticket values.


The next Q lines each contain three integers:


L → start index (1-based)


R → end index (1-based)


K → number of left rotations to apply within that range



Output Format:
Print N integers — the final ticket values after all rotation queries.
Example Input:
5 2
1 2 3 4 5
1 3 1
2 4 2
Example Output:
2 4 3 1 5

Explanation:
Initial: [1, 2, 3, 4, 5]

Query 1 → Rotate elements from index 1 to 3 left by 1 → [2, 3, 1, 4, 5]
Query 2 → Rotate elements from index 2 to 4 left by 2 → [2, 4, 3, 1, 5]
Final Output → 2 4 3 1 5


Sample Test Cases
 Test Case 1
Input:
5 2
1 2 3 4 5
1 3 1
2 4 2
Output:
2 4 3 1 5

Explanation:
Rotate [1,2,3] → [2,3,1]
Then rotate [3,1,4] → [4,3,1]
 Final: [2,4,3,1,5]



Test Case 2
Input:
6 1
10 20 30 40 50 60
2 5 3
Output:
10 40 50 60 20 60
Explanation:
 Range [20, 30, 40, 50] rotated left by 3 → [50, 20, 30, 40]
 Final array → [10, 50, 20, 30, 40, 60]

 Test Case 3
Input:
4 3
5 10 15 20
1 4 1
2 3 1
1 2 2
output:
10 15 20 5
Explanation:
Rotate [5,10,15,20] → [10,15,20,5]
Rotate [15,20] → [20,15] → [10,20,15,5]
Rotate [10,20] by 2 → no change (full cycle).
Final: [10,15,20,5]

 Test Case 4
Input:
5 2
9 8 7 6 5
1 5 2
2 4 1
Output:
7 6 8 5 9
Explanation:
Rotate [9,8,7,6,5] left by 2 → [7,6,5,9,8]
Rotate [6,5,9] left by 1 → [5,9,6]
 Final: [7,5,9,6,8]


Question-4) Question: Library Fine Calculation
Problem Statement:
In the Bookhaven Library, daily overdue fines are recorded in an array — each element representing the fine for a specific book.
The librarian wants to calculate the total fine for specific ranges of books, but with a limit:
If the total fine in a range exceeds a given threshold (T), it should be capped at that threshold.
You must write a program that:
Processes multiple fine calculation queries.


Each query specifies a book range (L to R) and a threshold (T).


Outputs the total fine for that range — capped at the threshold value.


Input Format:
The first line contains two integers —
 N → number of books (array size)
 Q → number of queries


The second line contains N integers — daily fines for each book.


The next Q lines each contain three integers:
L → start index (1-based)
R → end index (1-based)
T → threshold (maximum allowable total fine)
Output Format:
For each query, print a single integer —
 the total fine for the given range, capped at T if necessary.
Example Input:
5 2
10 20 30 40 50
1 3 50
2 4 100
Example Output:
50
90
Explanation:
Query 1:
 Range (1–3) → 10 + 20 + 30 = 60 → exceeds threshold (50) → output 50


Query 2:
 Range (2–4) → 20 + 30 + 40 = 90 → less than threshold (100) → output 90
Sample Test Cases
Test Case 1
Input:
5 2
10 20 30 40 50
1 3 50
2 4 100

Output:
50
90
Explanation:
(1–3): 10 + 20 + 30 = 60 → exceeds 50 → capped to 50
(2–4): 20 + 30 + 40 = 90 → within 100 → 90


 Test Case 2
Input:
6 3
5 15 25 35 45 55
1 4 60
3 6 100
2 5 80

Output:
60
100
80

Explanation:
(1–4): 5+15+25+35=80 → exceeds 60 → output 60
(3–6): 25+35+45+55=160 → exceeds 100 → output 100
(2–5): 15+25+35+45=120 → exceeds 80 → output 80


 Test Case 3
Input:
4 2
12 8 10 5
1 2 30
2 4 20

Output:
20
20

Explanation:
(1–2): 12 + 8 = 20 → within threshold 30 → 20
(2–4): 8 + 10 + 5 = 23 → exceeds 20 → capped to 20



 Test Case 4
Input:
5 2
0 0 10 20 30
3 5 100
1 2 5

Output:
60
0

Explanation:
(3–5): 10 + 20 + 30 = 60 → less than 100 → 60
(1–2): 0 + 0 = 0 → within 5 → 0



Question-5) StoreMax Stock Balancing
Problem Statement:
In the StoreMax warehouse, stock levels of items are recorded in an array.
To balance stock across sections, the manager wants to equalize stock in specific ranges by setting all values in the range to the median of that range:
Odd-length range: use the middle element after sorting.
Even-length range: use the lower middle (element at index (length - 1) / 2 after sorting).


You must write a program that:
Processes multiple balancing queries.
Outputs the final stock levels after all queries.


Input Format:
First line: Two integers
N → number of items (array size)
Q → number of queries
Second line: N integers — initial stock levels of each item.
Next Q lines: Two integers L and R (1-based indices) representing the range for each query.


Output Format:
Print N integers — the final stock levels after all balancing queries.
Constraints:
1 ≤ N, Q ≤ 1000

Example Input:
5 2
10 50 30 20 40
1 3
2 5
Example Output:
30 30 30 30 30

Explanation (Step-by-Step):
Initial array: [10, 50, 30, 20, 40]
Query 1: 1–3 → subarray [10,50,30] → sorted [10,30,50] → median = 30
Update positions 1–3 → [30,30,30,20,40]
Query 2: 2–5 → subarray [30,30,20,40] → sorted [20,30,30,40] → median = 30
Update positions 2–5 → [30,30,30,30,30]
 Final array: [30,30,30,30,30]
Sample Test Cases
 Test Case 1
Input:
5 2
10 50 30 20 40
1 3
2 5
Output:
30 30 30 30 30
Explanation:
Query1 → median 30 → [30,30,30,20,40]
Query2 → median 30 → [30,30,30,30,30]


 Test Case 2
Input:
6 2
5 15 25 10 20 30
1 4
3 6
Output:
10 10 20 20 20 20
Explanation:
Query1 → subarray [5,15,25,10] → sorted [5,10,15,25] → median = 10 → update → [10,10,10,10,20,30]
Query2 → subarray [10,10,20,30] → sorted [10,10,20,30] → median = 20 → update → [10,10,20,20,20,20]


 Test Case 3
Input:
4 1
8 4 12 6
1 4
Output:
6 6 6 6
Explanation:
Query → subarray [8,4,12,6] → sorted [4,6,8,12] → median = 6 → update all → [6,6,6,6]


 Test Case 4
Input:
7 3
1 7 3 9 5 2 8
1 3
4 7
2 5
Output:
3 3 3 5 5 5 5


Day-12 Multi-Dimessional Array Examples Programs
====================================================
1. Read and Print a 2D Array
2. Sum of All Elements in 2D Array.
3. Row-wise Sum in 2D Array.
4. Column-wise Sumin 2D Array.
5. Transpose of a Matrix
Switch rows with columns)
6. Multiply Two Matrices 
7. Java Program to Add Two Matrices
8.Java Program for Row-wise and Column-wise Product



Day-13 Petterns Examples-1
=========================
Question1) Print the below pattern
 * * * *
   * * *
     * *
       *

Question-2) Print squareHollowPattern

******
*    *
*    *
*    *
*    *
******

Question3) print below numeric Pattern
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15
16 17 18 19 20 21

Question-4) Zero-One Triangle Pattern

1
0 1
1 0 1
0 1 0 1
1 0 1 0 1
0 1 0 1 0 1

Question-5) Right Pascal’s Triangle
Forms a right-angled triangle pointing upward and downward, creating a right Pascal’s triangle shape.


*
* *
* * *
* * * *
* * *
* *
*


Day-14 patterns
===================
Question1) print the below Square Hollow Pattern
* * * * *
*       *
*       *
*       *
* * * * *

Question2) print Diamond Hollow Pattern
   *
   * *
  *   *
 *     *
*       *
*         *
*       *
 *     *
  *   *
   * *
    *
Question-3) Print Pyramid Hollow Pattern
       *
     *   *
   *       *
 *           *
* * * * * * * *

Question-4) Square Pattern of Alphabetical Characters
ABCD
EFGH
IJKL
MNOP

 Question-5) Floyd's Triangle (Letters)
A
BC
DEF
GHIJ
KLMNO

Question-6) Number Triangle Pattern
     1 
    2 2 
   3 3 3 
  4 4 4 4 
 5 5 5 5 5 
6 6 6 6 6 6 


======================================================================================
Question 1: Missing Roll Number
Scenario:
In a classroom, students have roll numbers stored in an array. However, one roll number is missing in the sequence. Write a program to find the missing roll number assuming the roll numbers are consecutive starting from 1.

Testcase-1:
Input: [1, 2, 4, 5]
Output: Missing number: 3

Testcase-2:
Input: [2, 3, 5, 6]
Output: Missing number: 4

Testcase-3:
Input: [10, 11, 13, 14]
Output: Missing number: 12
--------------------------------------------------------------------------------------------------------------

Question 2: Second Highest Score
Scenario:
During a cricket match, runs scored by each batsman are stored in an array. The coach wants to find the second highest score.

Testcase-1:
Input: [50, 75, 100, 25]
Output: Second highest score: 75

Testcase-2:
Input: [120, 80, 90, 60]
Output: Second highest score: 90

Testcase-3:
Input: [33, 45, 67, 67, 21]
Output: Second highest score: 45
------------------------------------------------------------------------------------------------------------

 Question 3: Common Start or End
Scenario:
Two bus routes are represented by arrays of stop numbers. Return true if both routes start or end at the same stop.

Testcase-1:
Input: a = [1, 2, 3], b = [7, 3]
Output: true

Testcase-2:
Input: a = [1, 2, 3], b = [7, 3, 2]
Output: false

Testcase-3:
Input: a = [1, 2, 3], b = [1, 3]
Output: true
-------------------------------------------------------------------------------------------------------------------------

Question 4: Rotate Student IDs Left
Scenario:
The college administration stores student IDs in order of registration. To balance class sections,
 the IDs need to be rotated left, so the first student moves to the last.

Testcase-1:
Input: [1, 2, 3]
Output: [2, 3, 1]

Testcase-2:
Input: [5, 11, 9]
Output: [11, 9, 5]

Testcase-3:
Input: [7, 0, 0]
Output: [0, 0, 7]
----------------------------------------------------------------------------------------------------------
 
 Question 5: Total Marks of Three Students
Scenario:
The marks of three students are given in an array. Write a program to find the total marks obtained.

Testcase-1:
Input: [1, 2, 3]
Output: 6

Testcase-2:
Input: [5, 11, 2]
Output: 18

Testcase-3:
Input: [7, 0, 0]
Output: 7
----------------------------------------------------------------------------------------------------------
 
 Question 6: Set All to Maximum of Ends
Scenario:
Given marks of a student in three tests, if the first or last test score is higher, make all elements equal to that maximum value.

Testcase-1:
Input: [1, 2, 3]
Output: [3, 3, 3]

Testcase-2:
Input: [11, 5, 9]
Output: [11, 11, 11]

Testcase-3:
Input: [2, 11, 20]
Output: [20, 20, 20]
---------------------------------------------------------------------------------------------------------
 
 Question 7: Middle Values of Two Groups
Scenario:
Two sections of students each have three roll numbers. Return an array containing the middle roll number 
from each section.

Testcase-1:
Input: a = [1, 2, 3], b = [4, 5, 6]
Output: [2, 5]

Testcase-2:
Input: a = [7, 7, 7], b = [3, 8, 0]
Output: [7, 8]

Testcase-3:
Input: a = [5, 2, 9], b = [1, 4, 5]
Output: [2, 4]
---------------------------------------------------------------------------------------

 Question 8: First and Last Roll Numbers
Scenario:
Given an array of roll numbers, return a new array containing only the first and last roll numbers.

Testcase-1:
Input: [1, 2, 3]
Output: [1, 3]

Testcase-2:
Input: [1, 2, 3, 4]
Output: [1, 4]

Testcase-3:
Input: [7, 4, 6, 2]
Output: [7, 2]
---------------------------------------------------------------------------------------
Question 9: Extend Array and Keep Last Value
Scenario:
The company wants to create a backup array double the original size. All new elements should be 0 except the last element, which should match the last element of the original array.

Testcase-1:
Input: [4, 5, 6]
Output: [0, 0, 0, 0, 0, 6]

Testcase-2:
Input: [1, 2]
Output: [0, 0, 0, 2]

Testcase-3:
Input: [3]
Output: [0, 3]









